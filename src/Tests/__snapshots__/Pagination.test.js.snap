// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Pagination Renders to the DOM 1`] = `
Pagination {
  "context": Object {},
  "handleClick": [Function],
  "props": Object {
    "filteredData": Array [
      Object {
        "assignedTo": "Alex Coupe",
        "claimSpecNo": "5500001",
        "dueDate": "01-09-2019",
        "id": 1,
        "priority": "Normal",
        "taskName": "Review New Claim",
        "type": "Claim",
      },
      Object {
        "assignedTo": "Alex Coupe",
        "claimSpecNo": "5500000",
        "dueDate": "01-09-2019",
        "id": 2,
        "priority": "Normal",
        "taskName": "Review New Invoice",
        "type": "Claim",
      },
      Object {
        "assignedTo": "Donald Duck",
        "claimSpecNo": "5500244",
        "dueDate": "29-09-2019",
        "id": 3,
        "priority": "Urgent",
        "taskName": "Diary Review",
        "type": "Claim",
      },
      Object {
        "assignedTo": "Peter Parker",
        "claimSpecNo": "5500044",
        "dueDate": "05-09-2019",
        "id": 4,
        "priority": "Urgent",
        "taskName": "Loss Adjustor Report Received",
        "type": "Claim",
      },
    ],
    "recordsPerPage": 3,
    "totalRecords": 4,
  },
  "refs": Object {},
  "setState": [Function],
  "state": Object {
    "currentPage": 1,
    "finalPage": 2,
    "paginatedData": Array [
      Object {
        "assignedTo": "Alex Coupe",
        "claimSpecNo": "5500001",
        "dueDate": "01-09-2019",
        "id": 1,
        "priority": "Normal",
        "taskName": "Review New Claim",
        "type": "Claim",
      },
      Object {
        "assignedTo": "Alex Coupe",
        "claimSpecNo": "5500000",
        "dueDate": "01-09-2019",
        "id": 2,
        "priority": "Normal",
        "taskName": "Review New Invoice",
        "type": "Claim",
      },
      Object {
        "assignedTo": "Donald Duck",
        "claimSpecNo": "5500244",
        "dueDate": "29-09-2019",
        "id": 3,
        "priority": "Urgent",
        "taskName": "Diary Review",
        "type": "Claim",
      },
    ],
    "totalRecords": 4,
  },
  "updater": Updater {
    "_callbacks": Array [],
    "_renderer": ReactShallowRenderer {
      "_context": Object {},
      "_didScheduleRenderPhaseUpdate": false,
      "_dispatcher": Object {
        "readContext": [Function],
        "useCallback": [Function],
        "useContext": [Function],
        "useDebugValue": [Function],
        "useEffect": [Function],
        "useImperativeHandle": [Function],
        "useLayoutEffect": [Function],
        "useMemo": [Function],
        "useReducer": [Function],
        "useRef": [Function],
        "useResponder": [Function],
        "useState": [Function],
      },
      "_element": <Pagination
        filteredData={
          Array [
            Object {
              "assignedTo": "Alex Coupe",
              "claimSpecNo": "5500001",
              "dueDate": "01-09-2019",
              "id": 1,
              "priority": "Normal",
              "taskName": "Review New Claim",
              "type": "Claim",
            },
            Object {
              "assignedTo": "Alex Coupe",
              "claimSpecNo": "5500000",
              "dueDate": "01-09-2019",
              "id": 2,
              "priority": "Normal",
              "taskName": "Review New Invoice",
              "type": "Claim",
            },
            Object {
              "assignedTo": "Donald Duck",
              "claimSpecNo": "5500244",
              "dueDate": "29-09-2019",
              "id": 3,
              "priority": "Urgent",
              "taskName": "Diary Review",
              "type": "Claim",
            },
            Object {
              "assignedTo": "Peter Parker",
              "claimSpecNo": "5500044",
              "dueDate": "05-09-2019",
              "id": 4,
              "priority": "Urgent",
              "taskName": "Loss Adjustor Report Received",
              "type": "Claim",
            },
          ]
        }
        recordsPerPage={3}
        totalRecords={4}
      />,
      "_firstWorkInProgressHook": null,
      "_forcedUpdate": false,
      "_instance": [Circular],
      "_isReRender": false,
      "_newState": null,
      "_numberOfReRenders": 0,
      "_renderPhaseUpdates": null,
      "_rendered": <React.Fragment>
        <table
          className="table table-hover table-bordered"
        >
          <TableHeader
            paginatedData={
              Array [
                Object {
                  "assignedTo": "Alex Coupe",
                  "claimSpecNo": "5500001",
                  "dueDate": "01-09-2019",
                  "id": 1,
                  "priority": "Normal",
                  "taskName": "Review New Claim",
                  "type": "Claim",
                },
                Object {
                  "assignedTo": "Alex Coupe",
                  "claimSpecNo": "5500000",
                  "dueDate": "01-09-2019",
                  "id": 2,
                  "priority": "Normal",
                  "taskName": "Review New Invoice",
                  "type": "Claim",
                },
                Object {
                  "assignedTo": "Donald Duck",
                  "claimSpecNo": "5500244",
                  "dueDate": "29-09-2019",
                  "id": 3,
                  "priority": "Urgent",
                  "taskName": "Diary Review",
                  "type": "Claim",
                },
              ]
            }
          />
        </table>
        <div>
          <nav
            aria-label="Page navigation example"
          >
            <ul
              className="pagination justify-content-center"
            >
              <li
                className="page-item"
              >
                <button
                  aria-label="Previous"
                  className="btn disabled"
                  disabled={true}
                  id="previousPage"
                  name="previousPage"
                  onClick={[Function]}
                >
                  <span
                    aria-hidden="true"
                  >
                    <FontAwesomeIcon
                      border={false}
                      className=""
                      fixedWidth={false}
                      flip={null}
                      icon={
                        Object {
                          "icon": Array [
                            320,
                            512,
                            Array [],
                            "f053",
                            "M34.52 239.03L228.87 44.69c9.37-9.37 24.57-9.37 33.94 0l22.67 22.67c9.36 9.36 9.37 24.52.04 33.9L131.49 256l154.02 154.75c9.34 9.38 9.32 24.54-.04 33.9l-22.67 22.67c-9.37 9.37-24.57 9.37-33.94 0L34.52 272.97c-9.37-9.37-9.37-24.57 0-33.94z",
                          ],
                          "iconName": "chevron-left",
                          "prefix": "fas",
                        }
                      }
                      inverse={false}
                      listItem={false}
                      mask={null}
                      pull={null}
                      pulse={false}
                      rotation={null}
                      size={null}
                      spin={false}
                      symbol={false}
                      title=""
                      transform={null}
                    />
                  </span>
                </button>
              </li>
              <li
                className="page-item"
              >
                <button
                  className="btn disabled"
                  disabled={true}
                  onClick={[Function]}
                  value={1}
                >
                  <strong>
                    1
                  </strong>
                </button>
              </li>
              <li
                className="page-item"
              >
                <button
                  className="page-link"
                  name="value2"
                  onClick={[Function]}
                  style={
                    Object {
                      "background": "none",
                      "border": "0",
                    }
                  }
                  value={2}
                >
                  2
                </button>
              </li>
              <button
                aria-label="Next"
                className="page-link"
                id="nextPage"
                name="nextPage"
                onClick={[Function]}
                style={
                  Object {
                    "background": "none",
                    "border": "0",
                  }
                }
              >
                <span
                  aria-hidden="true"
                >
                  <FontAwesomeIcon
                    border={false}
                    className=""
                    fixedWidth={false}
                    flip={null}
                    icon={
                      Object {
                        "icon": Array [
                          320,
                          512,
                          Array [],
                          "f054",
                          "M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z",
                        ],
                        "iconName": "chevron-right",
                        "prefix": "fas",
                      }
                    }
                    inverse={false}
                    listItem={false}
                    mask={null}
                    pull={null}
                    pulse={false}
                    rotation={null}
                    size={null}
                    spin={false}
                    symbol={false}
                    title=""
                    transform={null}
                  />
                </span>
              </button>
            </ul>
          </nav>
        </div>
      </React.Fragment>,
      "_rendering": false,
      "_updater": [Circular],
      "_workInProgressHook": null,
    },
  },
}
`;
